Exastro install completion!

1. Execute the following command and wait until the pod becomes "Running" or "Completed":

  # NOTE: You can also append "-w" to the command or wait until the state changes with "watch command"

  kubectl get pods --namespace {{ .Release.Namespace }}

2. Get the ENCRYPT_KEY by running these commands:

  # Exastro IT Automation ENCRYPT_KEY
  kubectl get secret ita-secret-ita-global -n {{ .Release.Namespace }} -o jsonpath='{.data.ENCRYPT_KEY}' | base64 -d

  # Exastro Platform ENCRYPT_KEY
  kubectl get secret platform-secret-pf-global -n {{ .Release.Namespace }} -o jsonpath='{.data.ENCRYPT_KEY}' | base64 -d

  !!! Please save the output ENCRYPT_KEY carefully. !!!

3. Run the following command to get the application URL and go to the URL or go to the displayed URL:

{{- $valuesPlatform := (get .Values "exastro-platform") }}
{{- $valuesPlatFormAuth := (get $valuesPlatform "platform-auth") }}
{{- if $valuesPlatFormAuth.ingress.enabled }}
{{- range $valuesPlatFormAuth.ingress.hosts }}
  {{- $host := .host }}
  {{- range .paths }}
  {{- if eq .backend "http" }}
  *************************
  * Service Console       *
  *************************
  http{{ if $valuesPlatFormAuth.ingress.tls }}s{{ end }}://{{ $host }}{{ .path }}
  {{- end }}
  {{- if eq .backend "httpMng" }}
  *************************
  * Administrator Console *
  *************************
  http{{ if $valuesPlatFormAuth.ingress.tls }}s{{ end }}://{{ $host }}{{ .path }}auth/
  {{- end }}
  {{- printf "\n" -}}
  {{- end }}
{{- end }}
{{- else if contains "NodePort" $valuesPlatFormAuth.service.type }}
  export NODE_SVC_PORT=$(kubectl get services platform-auth --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}")
  export NODE_MGT_PORT=$(kubectl get services platform-auth --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[1].nodePort}")
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo "*************************"
  echo "* Administrator Console *"
  echo "*************************"
  echo http://$NODE_IP:$NODE_MGT_PORT/auth/
  echo ""
  echo "*************************"
  echo "* Service Console       *"
  echo "*************************"
  echo http://$NODE_IP:$NODE_SVC_PORT

{{- else if contains "LoadBalancer" $valuesPlatFormAuth.service.type }}
  # NOTE: It may take a few minutes for the LoadBalancer IP to be available.
  #       You can watch the status of by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w platform-auth'
  {{- printf "\n" }}
  export NODE_SVC_PORT=$(kubectl get services platform-auth --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}")
  export NODE_MGT_PORT=$(kubectl get services platform-auth --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[1].nodePort}")
  export NODE_IP=$(kubectl get services platform-auth --namespace {{ .Release.Namespace }} -o jsonpath="{.status.loadBalancer.ingress[0].ip}")
  echo "*************************"
  echo "* Administrator Console *"
  echo "*************************"
  echo http://$NODE_IP:$NODE_MGT_PORT/auth/
  echo ""
  echo "*************************"
  echo "* Service Console       *"
  echo "*************************"
  echo http://$NODE_IP:$NODE_SVC_PORT
{{- else if contains "ClusterIP" $valuesPlatFormAuth.service.type }}
  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/name=platform-auth,app.kubernetes.io/instance={{ .Release.Name }}" -o jsonpath="{.items[0].metadata.name}")
  export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
  echo "Visit http://127.0.0.1:8080 to use your application"
  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME
{{ end }}

# Note: You can display this note again by executing the following command.
{{- printf "\n" }}
