{{/*
#   Copyright 2022 NEC Corporation
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
*/}}

apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ template "ita-by-execinstance-dataautoclean.name" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "ita-by-execinstance-dataautoclean.labels" . | nindent 4 }}
spec:
  schedule: "{{ .Values.schedule }}"
  successfulJobsHistoryLimit: {{ .Values.successfulJobsHistoryLimit }}
  failedJobsHistoryLimit: {{ .Values.failedJobsHistoryLimit }}
  jobTemplate:
    spec:
      backoffLimit: {{ .Values.backoffLimit }}
      template:
        metadata:
          {{- with .Values.podAnnotations }}
          annotations:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          labels:
            {{- include "ita-by-execinstance-dataautoclean.selectorLabels" . | nindent 12 }}
        spec:
          restartPolicy: OnFailure
          {{- with .Values.imagePullSecrets }}
          imagePullSecrets:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          serviceAccountName: {{ include "ita-by-execinstance-dataautoclean.serviceAccountName" . }}
          securityContext:
            {{- toYaml .Values.podSecurityContext | nindent 12 }}
          initContainers:
            - name: database-alive-check
              securityContext:
                {{- toYaml .Values.database.securityContext | nindent 16 }}
              image: "{{ .Values.database.initContainerImage.repository }}:{{ .Values.database.initContainerImage.tag | default "latest" }}"
              imagePullPolicy: {{ .Values.database.initContainerImage.pullPolicy }}
              command: ["sh", "-c"]
              args:
                - |
                  {{- .Values.database.databaseCheck | nindent 18 }}
              env:
                {{- range $define := .Values.global -}}
                {{-   range $config, $value := $define.config }}
                {{-     if or (eq $define.name "ita-global") (eq $define.name "ita-database") }}
                - name: {{ $config }}
                  valueFrom:
                    configMapKeyRef:
                      name: ita-params-{{ $define.name }}
                      key: {{ $config }}
                {{-     end -}}
                {{-   end -}}
                {{-   range $secret, $value := $define.secret }}
                {{-     if or (eq $define.name "ita-database") }}
                - name: {{ $secret }}
                  valueFrom:
                    secretKeyRef:
                      name: ita-secret-{{ $define.name }}
                      key: {{ $secret }}
                {{-     end }}
                {{-   end }}
                {{- end }}
          containers:
            - name: {{ template "ita-by-execinstance-dataautoclean.name" . }}
              securityContext:
                {{- toYaml .Values.securityContext | nindent 16 }}
              image: "{{ template "ita-by-execinstance-dataautoclean.repository" . }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
              imagePullPolicy: {{ .Values.image.pullPolicy }}
              env:
                {{- range $define := .Values.global -}}
                {{-   range $config, $value := $define.config }}
                {{-     if or (eq $define.name "ita-global") (eq $define.name "ita-database") }}
                - name: {{ $config }}
                  valueFrom:
                    configMapKeyRef:
                      name: ita-params-{{ $define.name }}
                      key: {{ $config }}
                {{-     end -}}
                {{-   end -}}
                {{-   range $secret, $value := $define.secret }}
                {{-     if or (eq $define.name "ita-global") (eq $define.name "ita-database") }}
                - name: {{ $secret }}
                  valueFrom:
                    secretKeyRef:
                      name: ita-secret-{{ $define.name }}
                      key: {{ $secret }}
                {{-     end }}
                {{-   end }}
                {{- end -}}
                {{ range $config, $value := .Values.extraEnv }}
                - name: {{ $config }}
                  valueFrom:
                    configMapKeyRef:
                      name: params-{{ template "ita-by-execinstance-dataautoclean.name" $ }}
                      key: {{ $config }}
                {{- end }}
              volumeMounts:
                - name: volume-{{ template "ita-by-execinstance-dataautoclean.name" . }}-storage
                  mountPath: {{ .Values.persistence.mountPath.storage }}
                - name: volume-{{ template "ita-by-execinstance-dataautoclean.name" . }}-homedir
                  mountPath: {{ .Values.persistence.mountPath.homeDir }}
                - name: volume-{{ template "ita-by-execinstance-dataautoclean.name" . }}-tmp
                  mountPath: {{ .Values.persistence.mountPath.tmp }}
              # livenessProbe:
              #   tcpSocket:
              #     port: 8080
              #   # httpGet:
              #   #   path: /
              #   #   port: 8080
              #   initialDelaySeconds: 5
              #   periodSeconds: 10
              # readinessProbe:
              #   tcpSocket:
              #     port: 8080
              #   # httpGet:
              #   #   path: /
              #   #   port: 8080
              #   initialDelaySeconds: 5
              #   periodSeconds: 10
              resources:
                {{- toYaml .Values.resources | nindent 16 }}
          volumes:
            - name: volume-{{ template "ita-by-execinstance-dataautoclean.name" . }}-storage
              {{- if and .Values.global.itaGlobalDefinition.persistence.enabled }}
              persistentVolumeClaim:
                claimName: pvc-{{ .Values.global.itaGlobalDefinition.name }}
              {{- else }}
              emptyDir: {}
              {{- end }}
            - name: volume-{{ template "ita-by-execinstance-dataautoclean.name" . }}-homedir
              emptyDir: {}
            - name: volume-{{ template "ita-by-execinstance-dataautoclean.name" . }}-pid
              emptyDir: {}
            - name: volume-{{ template "ita-by-execinstance-dataautoclean.name" . }}-socket
              emptyDir: {}
            - name: volume-{{ template "ita-by-execinstance-dataautoclean.name" . }}-tmp
              emptyDir: {}
          {{- with .Values.nodeSelector }}
          nodeSelector:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.affinity }}
          affinity:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.tolerations }}
          tolerations:
            {{- toYaml . | nindent 12 }}
          {{- end }}
